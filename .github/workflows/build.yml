name: Build Multi-Platform Executables

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

permissions:
  contents: read
  actions: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            executable_name: "图片内容过滤系统_Gemini版.exe"
            artifact_name: "PicExam-Gemini-Windows"
          - os: ubuntu-latest
            platform: linux
            executable_name: "图片内容过滤系统_Gemini版"
            artifact_name: "PicExam-Gemini-Linux"
          - os: macos-latest
            platform: macos
            executable_name: "图片内容过滤系统_Gemini版"
            artifact_name: "PicExam-Gemini-macOS"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        chcp 65001
        set PYTHONIOENCODING=utf-8
        python build_openai_version.py
      shell: cmd

    - name: Build executable (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        export PYTHONIOENCODING=utf-8
        python build_openai_version.py

    - name: Verify build
      run: |
        ls -la dist/
      shell: bash

    - name: Create release directory
      run: |
        mkdir -p release
      shell: bash

    - name: Copy executable and config files (Windows)
      if: matrix.platform == 'windows'
      run: |
        if exist "图片内容过滤系统_Gemini版.exe" (
          copy "图片内容过滤系统_Gemini版.exe" "release\"
          echo "Executable copied successfully"
        ) else if exist "dist\图片内容过滤系统_Gemini版.exe" (
          copy "dist\图片内容过滤系统_Gemini版.exe" "release\"
          echo "Executable copied from dist successfully"
        ) else (
          echo "ERROR: Executable not found!"
          exit /b 1
        )
        if exist "filter_config.json" (
          copy "filter_config.json" "release\"
          echo "filter_config.json copied successfully"
        ) else (
          echo "ERROR: filter_config.json not found!"
          exit /b 1
        )
        if exist "config_examples.json" (
          copy "config_examples.json" "release\"
          echo "config_examples.json copied successfully"
        ) else (
          echo "config_examples.json not found, skipping (optional file)"
        )
        echo "图片内容过滤系统 - Gemini版 Windows构建" > "release\README.txt"
        echo "使用Google Gemini AI进行图片内容审查" >> "release\README.txt"
        echo "支持无限重试机制，确保100%%审查覆盖率" >> "release\README.txt"
      shell: cmd

    - name: Copy executable and config files (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        if [ -f "图片内容过滤系统_Gemini版" ]; then
          cp "图片内容过滤系统_Gemini版" "release/"
          echo "Executable copied successfully"
        elif [ -f "dist/图片内容过滤系统_Gemini版" ]; then
          cp "dist/图片内容过滤系统_Gemini版" "release/"
          echo "Executable copied from dist successfully"
        else
          echo "ERROR: Executable not found!"
          exit 1
        fi
        if [ -f "filter_config.json" ]; then
          cp "filter_config.json" "release/"
          echo "filter_config.json copied successfully"
        else
          echo "ERROR: filter_config.json not found!"
          exit 1
        fi
        if [ -f "config_examples.json" ]; then
          cp "config_examples.json" "release/"
          echo "config_examples.json copied successfully"
        else
          echo "config_examples.json not found, skipping (optional file)"
        fi
        echo "图片内容过滤系统 - Gemini版 ${{ matrix.platform }}构建" > "release/README.txt"
        echo "使用Google Gemini AI进行图片内容审查" >> "release/README.txt"
        echo "支持无限重试机制，确保100%审查覆盖率" >> "release/README.txt"
        chmod +x "release/图片内容过滤系统_Gemini版"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release/
        retention-days: 30

  # 创建发布摘要
  create-summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create build summary
      run: |
        echo "# 构建摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 构建状态" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Linux: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- macOS: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 构建产物" >> $GITHUB_STEP_SUMMARY
        for dir in */; do
          if [ -d "$dir" ]; then
            echo "### $dir" >> $GITHUB_STEP_SUMMARY
            ls -la "$dir" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
