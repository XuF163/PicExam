name: Build Multi-Platform Executables

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            executable_name: "图片内容过滤系统.exe"
            artifact_name: "PicExam-Windows"
          - os: ubuntu-latest
            platform: linux
            executable_name: "图片内容过滤系统"
            artifact_name: "PicExam-Linux"
          - os: macos-latest
            platform: macos
            executable_name: "图片内容过滤系统"
            artifact_name: "PicExam-macOS"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --name="图片内容过滤系统" ^
          --onefile ^
          --console ^
          --clean ^
          --add-data="ultra_fast_filter.py;." ^
          --add-data="remove_approval_tags.py;." ^
          --add-data="filter_config.json;." ^
          image_filter_main.py
      shell: cmd

    - name: Build executable (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        pyinstaller --name="图片内容过滤系统" \
          --onefile \
          --console \
          --clean \
          --add-data="ultra_fast_filter.py:." \
          --add-data="remove_approval_tags.py:." \
          --add-data="filter_config.json:." \
          image_filter_main.py

    - name: Verify build
      run: |
        ls -la dist/
      shell: bash

    - name: Create release directory
      run: |
        mkdir -p release
      shell: bash

    - name: Copy executable and config files (Windows)
      if: matrix.platform == 'windows'
      run: |
        copy "dist\图片内容过滤系统.exe" "release\"
        copy "filter_config.json" "release\"
        copy "config.json" "release\" 2>nul || echo "config.json not found, skipping"
        echo "Build completed for Windows" > "release\README.txt"
      shell: cmd

    - name: Copy executable and config files (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cp "dist/图片内容过滤系统" "release/"
        cp "filter_config.json" "release/"
        cp "config.json" "release/" 2>/dev/null || echo "config.json not found, skipping"
        echo "Build completed for ${{ matrix.platform }}" > "release/README.txt"
        chmod +x "release/图片内容过滤系统"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: release/
        retention-days: 30

    - name: Upload to release (if release event)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: release/
        asset_name: ${{ matrix.artifact_name }}.zip
        asset_content_type: application/zip

  # 创建发布摘要
  create-summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create build summary
      run: |
        echo "# 构建摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 构建状态" >> $GITHUB_STEP_SUMMARY
        echo "- Windows: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Linux: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- macOS: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 构建产物" >> $GITHUB_STEP_SUMMARY
        for dir in */; do
          if [ -d "$dir" ]; then
            echo "### $dir" >> $GITHUB_STEP_SUMMARY
            ls -la "$dir" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
